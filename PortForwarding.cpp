#include <windows.h>
//#include <WSOCK32.h>
#include "Hookbase.h"
//// Fix action lag crash bug
//Injection(0x2d2000, "E85BD4C2FF85C00F84E741DEFFE99940DEFF0000000000000000000000000000E83BD4C2FF85C00F844643DEFFE9E941DEFF");
//Injection(0x5c80a6, "E955BF2100");
//Injection(0x5c8216, "E905BE2100");
//
//            // Fix network address list bug
//Injection(0x11215c, "8B6CB4348BFD83C9FF31C083C40CF2AEF7D1518D54247C55");
//// Fix directplay server hang
//Injection(0x29e
//Injection(0x586bbc, "E93F982200");
//Injection(0x1dba03, "0F1F440000E8F3471D005EC390");
char _007DB7BD[100] = "TCP";
char _007DB7C5[100] = "empires2:%s.%d";
DWORD ___005FCE14 = 0x05FCE14;
DWORD _00605C40 = 0x0605C40;
DWORD _7A5144;
DWORD _7A5140;
DWORD _7A5154;
DWORD _7A5158;
DWORD _7A515C;
DWORD _7A5148;
DWORD _7A5150;

void __declspec(naked) PortForwarding_007DB530()
{
	__asm {

		SUB ESP, 40h
		MOV EAX, DWORD PTR SS : [ESP + 44h]
		MOV EDX, DWORD PTR SS : [ESP + 48h]
		LEA ECX, DWORD PTR DS : [EDX * 4h + 7DB7BDh]
		LEA EDX, DWORD PTR SS : [ESP]
		PUSH EAX
		PUSH ECX
		PUSH offset _007DB7C5; ASCII "age2_x1:%s.%d"
		PUSH EDX
		//CALL age2_x1.0061442B
		CALL ___005FCE14
		ADD ESP, 10h
		MOV EDX, DWORD PTR SS : [ESP + 48h]
		LEA ECX, DWORD PTR DS : [EDX * 4h + 7DB7BDh]
		LEA EDX, DWORD PTR SS : [ESP]
		LEA EAX, DWORD PTR SS : [ESP + 0Ch]
		PUSH 0h
		PUSH 0h
		PUSH ECX
		PUSH EDX
		MOV EDX, DWORD PTR DS : [_7A5148]
		PUSH EDX
		PUSH EAX
		PUSH EAX
		MOV ECX, DWORD PTR DS : [_7A5144]
		MOV EAX, DWORD PTR DS : [_7A5140]
		PUSH ECX
		PUSH EAX
		CALL DWORD PTR DS : [_7A5154]
		ADD ESP, 64h
		RETN 8h
		ADD BYTE PTR DS : [EBX + 448B40ECh] , AL
		AND AL, 44h
		LEA EDX, DWORD PTR SS : [ESP]
		PUSH EAX
		PUSH offset _007DB7BD; ASCII "TCP"
		PUSH offset _007DB7C5; ASCII "age2_x1:%s.%d"
		PUSH EDX
		//CALL age2_x1.0061442B
		CALL ___005FCE14
		ADD ESP, 10h
		MOV EDX, DWORD PTR SS : [ESP + 48h]
		LEA ECX, DWORD PTR DS : [EDX * 4h + 7DB7BDh]
		LEA EAX, DWORD PTR SS : [ESP + 0Ch]
		PUSH 0h
		PUSH ECX
		PUSH EAX
		MOV ECX, DWORD PTR DS : [_7A5144]
		MOV EAX, DWORD PTR DS : [_7A5140]
		PUSH ECX
		PUSH EAX
		CALL DWORD PTR DS : [_7A5158]
		ADD ESP, 54h
		RETN 8h
		ADD BYTE PTR DS : [EAX] , AL
		ADD BYTE PTR DS : [EAX] , AL
		ADD BYTE PTR DS : [EAX] , AL
		SUB ESP, 40h
		MOV EAX, DWORD PTR SS : [ESP + 44h]
		LEA EDX, DWORD PTR SS : [ESP]
		PUSH EAX
		PUSH offset _007DB7BD; ASCII "TCP"
		PUSH offset _007DB7C5; ASCII "age2_x1:%s.%d"
		PUSH EDX
		//CALL age2_x1.0061442B
		CALL ___005FCE14
		ADD ESP, 10h
		XOR EAX, EAX
		LEA ECX, DWORD PTR SS : [ESP + 20h]
		LEA EDX, DWORD PTR SS : [ESP + 30h]
		MOV DWORD PTR DS : [ECX] , EAX
		PUSH EAX
		PUSH EAX
		PUSH EAX
		PUSH EDX
		PUSH ECX
		MOV EDX, DWORD PTR SS : [ESP + 5Ch]
		LEA ECX, DWORD PTR DS : [EDX * 4h + 7DB7BDh]
		LEA EAX, DWORD PTR SS : [ESP + 20h]
		PUSH ECX
		PUSH EAX
		MOV ECX, DWORD PTR DS : [_7A5144]
		MOV EAX, DWORD PTR DS : [_7A5140]
		PUSH ECX
		PUSH EAX
		CALL DWORD PTR DS : [_7A515C]
		TEST EAX, EAX
		JE short _007DB642
		MOV EAX, 1h
		ADD ESP, 64h
		RETN 8h
		_007DB642:
		LEA ECX, DWORD PTR SS : [ESP + 54h]
		LEA EDX, DWORD PTR SS : [ESP + 30h]
		PUSH ECX
		PUSH EDX
		//CALL age2_x1.0061CD70
		CALL _00605C40
		TEST EAX, EAX
		JE short _007DB660
		MOV EAX, 2h
		ADD ESP, 6Ch
		RETN 8h
		_007DB660:
		LEA ECX, DWORD PTR SS : [ESP + 4Ch]
		MOV EDX, DWORD PTR DS : [_7A5148]
		PUSH ECX
		PUSH EDX
		//CALL age2_x1.0061CD70
		CALL _00605C40
		NEG EAX
		SBB EAX, EAX
		AND EAX, 0FFFFFFFEh
		ADD EAX, 2h
		ADD ESP, 74h
		RETN 8h


	}
}


void __declspec(naked) PortForwarding_007DB5E0()
{
	__asm {
		SUB ESP, 40h
		MOV EAX, DWORD PTR SS : [ESP + 44h]
		LEA EDX, DWORD PTR SS : [ESP]
		PUSH EAX
		PUSH offset _007DB7BD; ASCII "TCP"
		PUSH offset _007DB7C5; ASCII "age2_x1:%s.%d"
		PUSH EDX
		//CALL age2_x1.0061442B
		CALL ___005FCE14
		ADD ESP, 10h
		XOR EAX, EAX
		LEA ECX, DWORD PTR SS : [ESP + 20h]
		LEA EDX, DWORD PTR SS : [ESP + 30h]
		MOV DWORD PTR DS : [ECX] , EAX
		PUSH EAX
		PUSH EAX
		PUSH EAX
		PUSH EDX
		PUSH ECX
		MOV EDX, DWORD PTR SS : [ESP + 5Ch]
		LEA ECX, DWORD PTR DS : [EDX * 4h + 7DB7BDh]
		LEA EAX, DWORD PTR SS : [ESP + 20h]
		PUSH ECX
		PUSH EAX
		MOV ECX, DWORD PTR DS : [_7A5144]
		MOV EAX, DWORD PTR DS : [_7A5140]
		PUSH ECX
		PUSH EAX
		CALL DWORD PTR DS : [_7A515C]
		TEST EAX, EAX
		JE short _007DB642
		MOV EAX, 1h
		ADD ESP, 64h
		RETN 8h
		_007DB642:
		LEA ECX, DWORD PTR SS : [ESP + 54h]
		LEA EDX, DWORD PTR SS : [ESP + 30h]
		PUSH ECX
		PUSH EDX
		//CALL age2_x1.0061CD70
		CALL _00605C40
		TEST EAX, EAX
		JE short _007DB660
		MOV EAX, 2h
		ADD ESP, 6Ch
		RETN 8h
		_007DB660:
		LEA ECX, DWORD PTR SS : [ESP + 4Ch]
		MOV EDX, DWORD PTR DS : [_7A5148]
		PUSH ECX
		PUSH EDX
		//CALL age2_x1.0061CD70
		CALL _00605C40
		NEG EAX
		SBB EAX, EAX
		AND EAX, 0FFFFFFFEh
		ADD EAX, 2h
		ADD ESP, 74h
		RETN 8h


	}
}


DWORD _7A514C;
DWORD _007DB5E0 =(DWORD)PortForwarding_007DB5E0;
DWORD _007DB530 =(DWORD)PortForwarding_007DB530;
void __declspec(naked) PortForwarding_007DB6F0()
{
	__asm {
		PUSH 0h
		PUSH 0BA08h
		CALL _007DB5E0
		CMP EAX, 1h
		JNZ short _007DB71F
		PUSH 0h
		PUSH 0BA08h
		CALL _007DB530
		MOV EDX, DWORD PTR DS : [_7A514C]
		MOV BYTE PTR DS : [EDX + 0CAh] , 1h
		MOV EAX, 1h
		_007DB71F:
		RETN
	}

}

//0042E901 | .E8 DA070000    CALL empires2.0042F0E0
DWORD _0042F0E0 = 0x042F0E0;

DWORD  _0042E906 = 0x042E906;
DWORD  _007DB6F0 = (DWORD)PortForwarding_007DB6F0;
void __declspec(naked) PortForwarding_0042E901()
{
	__asm {
		CALL _0042F0E0
		MOV EAX, DWORD PTR DS : [_7A514C]
		TEST EAX, EAX
		JE short _007DB0B3
		CALL _007DB6F0
		_007DB0B3:
		JMP _0042E906
	}
}


void __declspec(naked) PortForwarding_007DB2E0()
{
	__asm {
	}
}

//007DB0C0   55               PUSH EBP
char _007DB720[100] = "miniupnpc.dll";
char _007DB736[100] = "upnpDiscover";
char _007DB743[100] = "UPNP_GetValidIGD";
char _007DB754[100] = "UPNP_AddPortMapping";
char _007DB768[100] = "UPNP_DeletePortMapping";
char _007DB77F[100] = "UPNP_GetSpecificPortMappingEntry";
char _007DB7A0[100] = "FreeUPNPUrls";
char _007DB7AD[100] = "freeUPNPDevlist";
//0042369D  |. E8 3E511E00    CALL <JMP.&WSOCK32.#115>                 ; \WSAStartup
DWORD _WSOCK32_WSAStartup = 0x06087E0;
//004237C2  |. E8 1F501E00    CALL <JMP.&WSOCK32.#116>                 ; [WSACleanup
DWORD _WSOCK32_WSACleanup = 0x06087E6;
DWORD _LoadLibrar = 0x061C110;
DWORD _GetProc = 0x61C0D8;
DWORD _006137C9 = 0x05F8FF0;//DWORD uu_006137C9 = 0x05F8FF0; heap alloc same func as user patch widescreen
DWORD _007DB2E0 = (DWORD)PortForwarding_007DB2E0;
void __declspec(naked) PortForwarding_007DB0C0()
{
	__asm {
		PUSH EBP
		MOV EBP, ESP
		SUB ESP, 0F00h
		PUSH EBX
		PUSH ESI
		PUSH EDI
		LEA EAX, DWORD PTR SS : [ESP + 38h]
		PUSH EAX
		PUSH 101h
		MOV DWORD PTR SS : [ESP + 28h] , 0h
		//CALL DWORD PTR DS : [<&WSOCK32.#115>] ; WS2_32.WSAStartup
		CALL DWORD PTR DS : [_WSOCK32_WSAStartup] ; WS2_32.WSAStartup
		TEST EAX, EAX
		JNZ _007DB2C9
		PUSH offset _007DB720; ASCII "age2_x1\miniupnpc.dll"
		CALL DWORD PTR DS : [_LoadLibrar]; KERNEL32.LoadLibraryA
		MOV EDI, EAX
		TEST EDI, EDI
		JE _007DB2C3
		MOV DWORD PTR DS : [_7A5150] , EDI
		MOV ESI, DWORD PTR DS : [_GetProc]; KERNEL32.GetProcAddress
		PUSH offset _007DB736; ASCII "upnpDiscover"
		PUSH EDI
		CALL ESI
		PUSH offset _007DB743; ASCII "UPNP_GetValidIGD"
		PUSH EDI
		MOV EBX, EAX
		CALL ESI
		PUSH  offset _007DB754; ASCII "UPNP_AddPortMapping"
		PUSH EDI
		MOV DWORD PTR SS : [ESP + 1Ch] , EAX
		CALL ESI
		PUSH offset _007DB768; ASCII "UPNP_DeletePortMapping"
		PUSH EDI
		MOV DWORD PTR SS : [ESP + 20h] , EAX
		CALL ESI
		PUSH offset _007DB77F; ASCII "UPNP_GetSpecificPortMappingEntry"
		PUSH EDI
		MOV DWORD PTR SS : [ESP + 24h] , EAX
		CALL ESI
		PUSH offset _007DB7A0; ASCII "FreeUPNPUrls"
		PUSH EDI
		MOV DWORD PTR SS : [ESP + 28h] , EAX
		CALL ESI
		PUSH offset _007DB7AD; ASCII "freeUPNPDevlist"
		PUSH EDI
		MOV DWORD PTR SS : [ESP + 18h] , EAX
		CALL ESI
		MOV ESI, EAX
		TEST EBX, EBX
		JE _007DB2C3
		CMP DWORD PTR SS : [ESP + 14h] , 0h
		JE _007DB2C3
		CMP DWORD PTR SS : [ESP + 18h] , 0h
		JE _007DB2C3
		CMP DWORD PTR SS : [ESP + 1Ch] , 0h
		JE _007DB2C3
		CMP DWORD PTR SS : [ESP + 20h] , 0h
		JE _007DB2C3
		CMP DWORD PTR SS : [ESP + 10h] , 0h
		JE _007DB2C3
		TEST ESI, ESI
		JE _007DB2C3
		MOV EAX, DWORD PTR SS : [ESP + 18h]
		MOV ECX, DWORD PTR SS : [ESP + 1Ch]
		MOV EDX, DWORD PTR SS : [ESP + 20h]
		MOV DWORD PTR DS : [_7A5154] , EAX
		MOV DWORD PTR DS : [_7A5158] , ECX
		MOV DWORD PTR DS : [_7A515C] , EDX
		XOR EAX, EAX
		LEA ECX, DWORD PTR SS : [ESP + 20h]
		MOV DWORD PTR DS : [ECX] , EAX
		PUSH ECX
		PUSH EAX
		PUSH EAX
		PUSH EAX
		PUSH EAX
		PUSH 3E8h
		CALL EBX
		MOV EBX, EAX
		ADD ESP, 18h
		TEST EBX, EBX
		JE _007DB2C3
		PUSH 40h
		LEA EDX, DWORD PTR SS : [ESP + 0D54h]
		PUSH EDX
		LEA EAX, DWORD PTR SS : [ESP + 1D0h]
		PUSH EAX
		LEA ECX, DWORD PTR SS : [ESP + 30h]
		PUSH ECX
		PUSH EBX
		CALL DWORD PTR SS : [ESP + 28h]
		ADD ESP, 14h
		MOV DWORD PTR SS : [ESP + 20h] , EAX
		TEST EAX, EAX
		JE _007DB2BD
		CMP EAX, 1h
		JNZ _007DB2B1
		PUSH 100h
		PUSH 1h
		CALL _006137C9
		ADD ESP, 8h
		TEST EAX, EAX
		JE _007DB2B1
		MOV DWORD PTR DS : [_7A5140] , EAX
		MOV ECX, DWORD PTR SS : [ESP + 24h]
		PUSH ECX
		PUSH EAX
		//CALL age2_x1.0061442B
		CALL ___005FCE14
		ADD ESP, 8h
		PUSH 100h
		PUSH 1h
		CALL _006137C9
		ADD ESP, 8h
		TEST EAX, EAX
		JE short _007DB2B1
		MOV DWORD PTR DS : [_7A5144] , EAX
		LEA ECX, DWORD PTR SS : [ESP + 6CCh]
		PUSH ECX
		PUSH EAX
		//CALL age2_x1.0061442B
		CALL ___005FCE14
		ADD ESP, 8h
		PUSH 40h
		PUSH 1h
		CALL _006137C9
		ADD ESP, 8h
		TEST EAX, EAX
		JE short _007DB2B1
		MOV DWORD PTR DS : [_7A5148] , EAX
		LEA ECX, DWORD PTR SS : [ESP + 0D50h]
		PUSH ECX
		PUSH EAX
		//CALL age2_x1.0061442B
		CALL ___005FCE14
		ADD ESP, 8h
		PUSH 0CBh
		PUSH 1h
		CALL _006137C9
		ADD ESP, 8h
		TEST EAX, EAX
		JE short _007DB2B1
		MOV DWORD PTR DS : [_7A514C] , EAX
		CALL _007DB2E0
		_007DB2B1:
		LEA ECX, DWORD PTR SS : [ESP + 24h]
		PUSH ECX
		CALL DWORD PTR SS : [ESP + 14h]
		ADD ESP, 4h
		_007DB2BD:
		PUSH EBX
		CALL ESI
		ADD ESP, 4h
		_007DB2C3:
		CALL DWORD PTR DS : [_WSOCK32_WSACleanup] ; WS2_32.WSACleanup
		_007DB2C9:
		XOR EAX, EAX
		POP EDI
		POP ESI
		POP EBX
		MOV ESP, EBP
		POP EBP
		RETN


	}
}


void setPortForwardingHook()
{
	setHook((void*)0x042E901, PortForwarding_0042E901);
}